{"version":3,"file":"static/js/534.98b33cef.chunk.js","mappings":"oPAeA,EATmB,SAACA,GAClB,IAAIC,EAAO,aAAeD,EAAME,GAChC,OACE,gBAAKC,UAAU,SAAf,UACE,SAAC,KAAD,CAASC,GAAIH,EAAME,UAAU,eAA7B,SAA6CH,EAAMK,UCDzD,EANgB,SAACL,GACf,OACE,gBAAKG,UAAU,UAAf,SAA0BH,EAAMM,W,uCCoC9BC,GAAeC,EAAAA,EAAAA,GAAiB,KAI9BC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAOF,OAPEA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,SAAAA,MACJ,WACE,OACE,kBAAMC,SAAUC,KAAKX,MAAMY,aAAcT,UAAU,sBAAnD,WACE,SAACU,EAAA,EAAD,CAAOC,SAAU,CAACC,EAAAA,EAAeR,GAAeS,UAAWC,EAAAA,EAAaC,SAAS,WAAWb,KAAK,UAAUc,KAAK,OAAOC,YAAY,2BACnI,4CAEJ,EAPEX,CAAuBY,EAAAA,WAUvBC,GAAsBC,EAAAA,EAAAA,GAA2D,CACrFC,KAAM,cADoBD,CAEzBd,GAEL,EAzCgD,SAACT,GAE/C,IAAMyB,EAAiBzB,EAAM0B,YACNC,KAAI,SAACC,GAAD,OAAU,SAAC,EAAD,CAA0BvB,KAAMuB,EAAKvB,KAAMH,GAAI0B,EAAK1B,IAAnC0B,EAAK1B,OAErD2B,EAAkB7B,EAAM8B,aACPH,KAAI,SAACrB,GAAD,OAAa,SAAC,EAAD,CAA0BA,QAASA,EAAQA,SAA7BA,EAAQJ,OAG9D,OACE,qBAASC,UAAU,yBAAnB,WACE,gBAAKA,UAAU,UAAf,SACGsB,KAEH,iBAAKtB,UAAU,SAAf,WACE,gBAAKA,UAAU,iBAAf,SACG0B,KAEH,SAACP,EAAD,CAAqBZ,SAAUV,EAAM+B,wB,oBCfvCC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GAIH,OAJGA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KAEJD,eAAiB,SAACE,GAChB,EAAKjC,MAAM+B,eAAeE,EAAS3B,UACpC,EAMA,OANA,8BAED,WACE,OAAO,SAAC,EAAD,CAAWwB,aAAcnB,KAAKX,MAAM8B,aACzBJ,YAAaf,KAAKX,MAAM0B,YACxBK,eAAgBpB,KAAKoB,qBACxC,EAVGC,CAA0BX,EAAAA,WA6BhC,GAAea,EAAAA,EAAAA,KACbC,EAAAA,EAAAA,KAhBoB,SAACC,GACrB,MAAO,CACLN,aAAcM,EAAMN,aAAaA,aACjCJ,YAAaU,EAAMN,aAAaJ,gBAIX,SAACW,GACxB,MAAO,CACLN,eAAgB,SAACO,GACfD,EAASE,EAAAA,EAAAA,yBAAiCD,SAO9CE,EAAAA,EAFF,CAGGR","sources":["components/Main/Content/Messages/DialogItem/DialogItem.jsx","components/Main/Content/Messages/Message/Message.jsx","components/Main/Content/Messages/Messages.tsx","components/Main/Content/Messages/MessagesContainer.tsx"],"sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './DialogItem.css';\r\n\r\n\r\n\r\nconst DialogItem = (props) => {\r\n  let path = \"/messages/\" + props.id\r\n  return (\r\n    <div className=\"dialog\">\r\n      <NavLink to={path} className=\"dialog__link\">{props.name}</NavLink>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport './Message.css';\r\n\r\nconst Message = (props) => {\r\n  return (\r\n    <div className=\"message\">{props.message}</div>\r\n  )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport './Messages.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { Field } from 'redux-form';\r\nimport { FormControl } from '../../../common/FormControls/FormControls';\r\nimport { MaxLengthCreator, requiredField } from '../../../../utilities/validators/validators';\r\nimport { DialogType, MessageType } from '../../../../redux/dialogsReducer';\r\nimport { FormMessageDataType } from './MessagesContainer';\r\n\r\n\r\ntype MessageOwnPropsType = {\r\n  dataMessages: Array<MessageType>\r\n  dataDialogs: Array<DialogType>\r\n  sendNewMessage: (formData: FormMessageDataType) => void\r\n}\r\n\r\nconst Messages: React.FC<MessageOwnPropsType> = (props) => {\r\n  \r\n  const dialogElements = props.dataDialogs\r\n                        .map((user) => <DialogItem key={user.id} name={user.name} id={user.id}/>)\r\n\r\n  const messageElements = props.dataMessages\r\n                        .map((message) => <Message key={message.id} message={message.message}/>)\r\n  \r\n  \r\n  return (\r\n    <section className='App__messages messages'>\r\n      <div className=\"dialogs\">\r\n        {dialogElements}\r\n      </div>\r\n      <div className=\"dialog\">\r\n        <div className='dialog__window'>\r\n          {messageElements}\r\n        </div>\r\n        <AddMessageReduxForm onSubmit={props.sendNewMessage}/>\r\n      </div>\r\n    </section>\r\n  )}\r\n  \r\n  let maxLength100 = MaxLengthCreator(100);\r\n\r\n  type AddMessageFormOwnPropsType = {}\r\n\r\n  class AddMessageForm extends React.Component<InjectedFormProps<FormMessageDataType, AddMessageFormOwnPropsType> & AddMessageFormOwnPropsType> {\r\n    render(){\r\n      return (\r\n        <form onSubmit={this.props.handleSubmit} className='dialog__sendMessage'>\r\n          <Field validate={[requiredField, maxLength100]} component={FormControl} formType='textarea' name='message' type='text' placeholder='Enter your message...'></Field>\r\n          <button>Send</button>\r\n        </form>\r\n    )}\r\n  }\r\n\r\n  const AddMessageReduxForm = reduxForm<FormMessageDataType, AddMessageFormOwnPropsType>({\r\n    form: 'addMessage'\r\n  })(AddMessageForm)\r\n\r\nexport default Messages;","import { connect } from 'react-redux'\r\nimport { actions, DialogType, MessageType } from '../../../../redux/dialogsReducer'\r\nimport Messages from './Messages'\r\nimport React from 'react'\r\nimport { ConnectedWithAuthRedirect } from '../../../../hoc/connectedWithAuthRedirect'\r\nimport { compose } from 'redux'\r\nimport { AppStateType } from '../../../../redux/redux-store'\r\n\r\ntype MapStatePropsType = {\r\n  dataMessages: Array<MessageType>\r\n  dataDialogs: Array<DialogType>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n  sendNewMessage: (message: string) => void\r\n}\r\n\r\nexport type FormMessageDataType = {\r\n  message: string\r\n}\r\n\r\nclass MessagesContainer extends React.Component<MapStatePropsType & MapDispatchPropsType> {\r\n\r\n  sendNewMessage = (formData: FormMessageDataType) => {\r\n    this.props.sendNewMessage(formData.message)\r\n  }\r\n\r\n  render() {\r\n    return <Messages  dataMessages={this.props.dataMessages}\r\n                      dataDialogs={this.props.dataDialogs}\r\n                      sendNewMessage={this.sendNewMessage}/>\r\n  }\r\n}\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    dataMessages: state.dataMessages.dataMessages,\r\n    dataDialogs: state.dataMessages.dataDialogs\r\n  }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: any): MapDispatchPropsType => {\r\n  return {\r\n    sendNewMessage: (newMessage: string) => {\r\n      dispatch(actions.sendMessageActionCreator(newMessage))\r\n    }\r\n  }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect<MapStatePropsType, MapDispatchPropsType, unknown, AppStateType>(mapStateToProps, mapDispatchToProps),\r\n  ConnectedWithAuthRedirect)\r\n  (MessagesContainer)\r\n\r\n\r\n "],"names":["props","path","id","className","to","name","message","maxLength100","MaxLengthCreator","AddMessageForm","onSubmit","this","handleSubmit","Field","validate","requiredField","component","FormControl","formType","type","placeholder","React","AddMessageReduxForm","reduxForm","form","dialogElements","dataDialogs","map","user","messageElements","dataMessages","sendNewMessage","MessagesContainer","formData","compose","connect","state","dispatch","newMessage","actions","ConnectedWithAuthRedirect"],"sourceRoot":""}