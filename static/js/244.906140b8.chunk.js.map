{"version":3,"file":"static/js/244.906140b8.chunk.js","mappings":"uQAiDA,EAtC2C,SAACA,GAE1C,OAA8BC,EAAAA,EAAAA,WAAS,GAAvC,eAAKC,EAAL,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAASD,EAAMI,QAAzC,eAAKA,EAAL,KAAaC,EAAb,MAEAC,EAAAA,EAAAA,YAAW,WACTD,EAAUL,EAAMI,UACf,CAACJ,EAAMI,SAEV,IAAMG,EAAmB,WACvBJ,GAAY,IAYd,OACE,gBAAKK,UAAU,sBAAf,SACIN,GAMF,gBAAKM,UAAU,0BAAf,UACE,kBAAOA,UAAU,oBAAoBC,SAbpB,SAACC,GACtBL,EAAUK,EAAEC,cAAcC,QAY2CC,WAAW,EAAMC,OAlB7D,WACzBX,GAAY,GACZH,EAAMe,aAAaX,IAgBiGQ,MAAQR,OAN1H,iBAAKI,UAAU,qBAAf,UACIR,EAAMgB,SAAU,iBAAMC,cAAgBV,EAAtB,SAA2CP,EAAMI,QAAU,eAC7E,0BAAQJ,EAAMI,QAAU,cACtBJ,EAAMgB,UAAW,mBAAQR,UAAU,kCAAkCU,QAAUX,EAA9D,UAAiF,gBAAKY,IAAKC,EAAcC,IAAI,cCvBxI,EARyC,SAACrB,GACxC,OACE,iBAAKQ,UAAU,0BAAf,WACE,eAAGA,UAAU,qBAAb,UAAmCR,EAAMsB,aAAzC,QAA2D,cAAGd,UAAU,sBAAb,SAAoCR,EAAMuB,mBC8B3G,EA3B4C,SAACvB,GAAW,IAAD,QACrD,OACE,iBAAKQ,UAAU,+BAAf,WACE,eAAIA,UAAU,wBAAd,mBAAuCR,EAAMwB,eAA7C,aAAuC,EAAeC,YACtD,SAAC,EAAD,CAAeT,QAAShB,EAAMgB,QAASZ,OAAQJ,EAAMI,OAAQW,aAAcf,EAAMe,gBACjF,gBAAKP,UAAU,gCAAf,UACE,4BACE,cAAGA,UAAU,8BAAb,UAA2C,sCACzCR,EAAMgB,UAAW,SAAC,KAAD,CAASU,GAAG,oBAAZ,UAAgC,cAAGlB,UAAU,+BAAb,6BACnD,gBAAKA,UAAU,qBAAf,SACImB,OAAOC,KAAK5B,EAAMwB,QAASK,UAAUC,KAAI,SAAAC,GAAQ,IAAD,EAAE,OAAO,SAAC,EAAD,CAAuBT,aAAcS,EAAKR,aAAY,UAAEvB,EAAMwB,eAAR,aAAE,EAAeK,SAASE,IAA9DA,cAInF,4BACE,cAAGvB,UAAU,oCAAb,UAAiD,gDAA4B,cAAGA,UAAU,yCAAb,SAAuD,UAAAR,EAAMwB,eAAN,SAAeQ,eAAiB,MAAQ,WAE9K,4BACE,cAAGxB,UAAU,oCAAb,UAAiD,qDAAiC,cAAGA,UAAU,yCAAb,mBAAuDR,EAAMwB,eAA7D,aAAuD,EAAeS,gCAE1J,4BACE,cAAGzB,UAAU,oCAAb,UAAiD,uCAAmB,cAAGA,UAAU,yCAAb,mBAAuDR,EAAMwB,eAA7D,aAAuD,EAAeU,iB,0DCElJ,EArBoD,SAAClC,GAAW,IAAD,IAQ7D,OACI,iBAAKQ,UAAU,oBAAf,WACE,gBAAKA,UAAU,2BAAf,UACE,iBAAKA,UAAU,2BAAf,WACE,gBAAKA,UAAU,qBAAqBW,KAAK,UAAAnB,EAAMmC,YAAYX,eAAlB,mBAA2BY,cAA3B,eAAmCC,QAASC,EAASjB,IAAI,OAClG,kBAAOkB,GAAG,oBAAoB/B,UAAU,oBAAoBgC,KAAK,OAAO/B,SAXtD,SAACC,GAAsC,IAAD,EAChE,UAAIA,EAAE+B,OAAOC,aAAb,OAAI,EAAgBC,QAClB3C,EAAM4C,UAAUlC,EAAE+B,OAAOC,MAAM,OAUvB1C,EAAMgB,UAAW,kBAAO6B,QAAQ,oBAAf,UAAmC,gBAAKrC,UAAU,4BAA4BW,IAAK2B,EAAazB,IAAI,aAG3H,SAAC,EAAD,CAASL,QAAShB,EAAMgB,QAASQ,QAASxB,EAAMmC,YAAYX,QAASpB,OAAQJ,EAAMI,OAAQW,aAAcf,EAAMe,mB,kGChBvH,EARkC,SAACf,GACjC,OACE,4BACE,gBAAKQ,UAAU,wBAAf,SAAwCR,EAAM+C,WAC9C,iBAAKvC,UAAU,yBAAf,WAAwC,gBAAKW,IAAK6B,EAAU3B,IAAI,KAAMrB,EAAMiD,a,sDCsB5EC,GAAcC,EAAAA,EAAAA,GAAiB,IAa/BC,GAAmBC,EAAAA,EAAAA,GAAqD,CAC5EC,KAAM,WADiBD,EAT6F,SAACrD,GACnH,OACE,kBAAMQ,UAAU,0BAA0B+C,SAAUvD,EAAMwD,aAA1D,WACE,SAACC,EAAA,EAAD,CAAOjD,UAAU,8BAA8BkD,SAAUR,EAAaS,YAAa,6BAA8BC,UAAWC,EAAAA,EAAaC,SAAU,WAAYtB,KAAM,OAAQuB,KAAM,cACnL,mBAAQvD,UAAU,4BAAlB,UAA8C,gBAAKW,IAAK6C,EAAS3C,IAAI,aAS7E,EAlC4C,SAACrB,GAE3C,IAAMiE,EAAajE,EAAMkE,UAAUpC,KAAI,SAACqC,GAAD,OAAU,SAAC,EAAD,CAAoBpB,QAASoB,EAAKC,SAAUnB,MAASkB,EAAKlB,OAA/CkB,EAAK5B,OAEjE,OACE,iBAAK/B,UAAU,kBAAf,WACE,iBAAKA,UAAU,kBAAf,WACE,eAAIA,UAAU,mBAAd,UAAiC,sCAC/BR,EAAMgB,UAAW,SAACoC,EAAD,CAAkBG,SAAUvD,EAAMqE,iBAEvD,gBAAK7D,UAAU,kBAAf,SACGyD,QCLT,EAZ8D,SAACjE,GAC3D,OACE,+BACE,SAAC,EAAD,CAAUgB,QAAShB,EAAMgB,QACfkD,UAAWlE,EAAMkE,UACjBG,WAAYrE,EAAMqE,gB,UCepC,EAZ4C,SAACrE,GAC3C,OAAKA,EAAMmC,YAAYX,SAKrB,iCACE,SAAC,EAAD,CAAaoB,UAAW5C,EAAM4C,UAAW5B,QAAShB,EAAMgB,QAASmB,YAAanC,EAAMmC,YAAa/B,OAAQJ,EAAMI,OAAQW,aAAcf,EAAMe,gBAC3I,SAAC,EAAD,CAAkBC,QAAShB,EAAMgB,QAASkD,UAAWlE,EAAMkE,UAAW/B,YAAanC,EAAMmC,YAAakC,WAAYrE,EAAMqE,iBANnH,SAACC,EAAA,EAAD,K,kDCkFX,GAAeC,EAAAA,EAAAA,KACbC,EAAAA,EAAAA,KA3BoB,SAACC,GAAD,MAA6C,CACjEP,UAAWO,EAAMtC,YAAY+B,UAC7B/B,YAAasC,EAAMtC,YACnB/B,OAAQqE,EAAMtC,YAAY/B,OAC1BsE,iBAAkBD,EAAME,KAAKpC,GAC7BqC,OAAQH,EAAME,KAAKC,WAGI,SAACC,GAAD,MAA0C,CACjEC,eAAgB,SAACC,GACfF,GAASG,EAAAA,EAAAA,IAA2BD,KAEtCE,cAAe,SAACF,GACdF,GAASK,EAAAA,EAAAA,IAA0BH,KAErChE,aAAc,SAACX,GACbyE,GAASM,EAAAA,EAAAA,IAAyB/E,KAEpCwC,UAAW,SAACwC,GACVP,GAASQ,EAAAA,EAAAA,IAAsBD,KAEjCf,WAAY,SAACD,GACXS,EAASS,EAAAA,GAAAA,qBAA6BlB,SAMxCmB,EAAAA,EAFF,EApE4F,SAACvF,GAE3F,IAAM+E,GAAcS,EAAAA,EAAAA,MAAdT,UACFU,EAASC,OAAOX,GAmBpB,OAJAzE,EAAAA,EAAAA,YAAW,WAZFmF,GAGHzF,EAAM8E,eAAeW,GACrBzF,EAAMiF,cAAcQ,IAHpBE,QAAQC,IAAI,8BAaf,CAACb,IAEC/E,EAAMmC,YAAYX,SAInB,gBAAKhB,UAAU,eAAf,UACE,SAAC,EAAD,CAAU2B,YAAenC,EAAMmC,YACrBnB,QAAS0E,OAAOX,KAAe/E,EAAM0E,iBACrC9B,UAAW5C,EAAM4C,UACjBgC,OAAQ5E,EAAM4E,OACdxE,OAAQJ,EAAMI,OACdW,aAAcf,EAAMe,aACpBmD,UAAWlE,EAAMkE,UACjBG,WApBG,SAACwB,GAClB7F,EAAMqE,WAAWwB,EAASzB,gBAQnB,SAACE,EAAA,EAAD","sources":["components/Main/Content/Profile/Description/Status/ProfileStatus.tsx","components/Main/Content/Profile/Description/AboutMe/ContactItem/ContactItem.tsx","components/Main/Content/Profile/Description/AboutMe/AboutMe.tsx","components/Main/Content/Profile/Description/Description.tsx","components/Main/Content/Profile/MyPosts/Post/Post.tsx","components/Main/Content/Profile/MyPosts/MyPosts.tsx","components/Main/Content/Profile/MyPosts/MyPostsContainer.tsx","components/Main/Content/Profile/Profile.tsx","components/Main/Content/Profile/ProfileContainer.tsx"],"sourcesContent":["import React, { ChangeEvent, useEffect, useState } from \"react\";\r\nimport './ProfileStatus.css';\r\nimport statusChange from './../../../../../../assets/icons/white/changeStatus.png';\r\n\r\n\r\nexport type PropsType = {\r\n  status: string \r\n  isOwner: boolean\r\n  updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatus: React.FC<PropsType> = (props) => {\r\n\r\n  let [editMode, setEditMode] = useState(false)\r\n  let [status, setStatus] = useState(props.status)\r\n\r\n  useEffect( () => { \r\n    setStatus(props.status); \r\n  }, [props.status])\r\n\r\n  const activateEditMode = ():void => {\r\n    setEditMode(true)\r\n  }\r\n\r\n  const deactivateEditMode = ():void => {\r\n    setEditMode(false)\r\n    props.updateStatus(status) \r\n  }\r\n\r\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setStatus(e.currentTarget.value)\r\n  }\r\n\r\n  return (\r\n    <div className='App__status-wrapper'>\r\n      {!editMode ?\r\n      <div className='App__profileStatus'>\r\n        { props.isOwner ? <span onDoubleClick={ activateEditMode }>{ props.status || 'No status' }</span> :\r\n        <span>{ props.status || 'No status' }</span> }\r\n        { props.isOwner && <button className=\"App__profileStatus-changeButton\" onClick={ activateEditMode }><img src={statusChange} alt='#'/></button> }\r\n      </div> :\r\n      <div className='App__status-input-block'>\r\n        <input className='App__status-input' onChange={ onStatusChange } autoFocus={true} onBlur={ deactivateEditMode } value={ status }/> \r\n      </div>}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default ProfileStatus;","import React from \"react\";\r\nimport './ContactItem.css';\r\n\r\ntype PropsType = {\r\n  contactTitle: string\r\n  contactValue: string | undefined\r\n}\r\n\r\nconst ContactItem: React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div className=\"App__contacts-list-item\">\r\n      <p className=\"App__contacts-item\">{props.contactTitle}:</p><p className=\"App__contacts-value\">{props.contactValue}</p>\r\n    </div>\r\n  )\r\n} \r\n\r\nexport default ContactItem;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { ContactsType, ProfileType } from '../../../../../../types/types';\r\nimport ProfileStatus from '../Status/ProfileStatus';\r\nimport './AboutMe.css';\r\nimport ContactItem from './ContactItem/ContactItem';\r\n\r\ntype AboutMePropsType = {\r\n  profile: ProfileType | null\r\n  isOwner: boolean\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n}\r\n\r\nconst AboutMe: React.FC<AboutMePropsType> = (props) => {\r\n  return (\r\n    <div className='App__description-aboutMeform'>\r\n      <h3 className='App__profile-fullName'>{props.profile?.fullName}</h3>\r\n      <ProfileStatus isOwner={props.isOwner} status={props.status} updateStatus={props.updateStatus}/>\r\n      <div className='App__description-aboutMe-list'>\r\n        <div>\r\n          <p className='App__profile-contacts-title'><b>Contacts</b></p>\r\n          { props.isOwner && <NavLink to='/profile-settings'><p className='App__description-editProfile'>Edit profile</p></NavLink>}\r\n          <div className='App__contacts-list'>\r\n            { Object.keys(props.profile!.contacts).map(key => { return <ContactItem key={key} contactTitle={key} contactValue={props.profile?.contacts[key as keyof ContactsType]}/>}) }\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <p className='App__description-aboutMeform-item'><b>Looking for a job</b></p><p className='App__description-aboutMeform-valueItem'>{props.profile?.lookingForAJob ? 'Yes' : 'No'}</p>\r\n      </div>\r\n      <div>\r\n        <p className='App__description-aboutMeform-item'><b>My proffesional skills</b></p><p className='App__description-aboutMeform-valueItem'>{props.profile?.lookingForAJobDescription}</p>\r\n      </div> \r\n      <div>\r\n        <p className='App__description-aboutMeform-item'><b>About me</b></p><p className='App__description-aboutMeform-valueItem'>{props.profile?.aboutMe}</p>\r\n      </div>  \r\n    </div> \r\n  )\r\n}\r\n\r\nexport default AboutMe;","import './Description.css';\r\nimport noPhoto from './../../../../../assets/images/no-photo.jpg';\r\nimport AboutMe from './AboutMe/AboutMe';\r\nimport uploadPhoto from './../../../../../assets/icons/white/uploadPhoto.png';\r\nimport { ChangeEvent } from 'react';\r\nimport { DataProfileType } from '../../../../../redux/profileReducer';\r\n\r\n\r\ntype DescriptionPropsType = {\r\n  isOwner: boolean\r\n  savePhoto: (filePhoto: any) => void\r\n  dataProfile: DataProfileType\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n}\r\n\r\nconst Description: React.FC<DescriptionPropsType> = (props) => {\r\n\r\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files?.length) {\r\n      props.savePhoto(e.target.files[0])\r\n    }\r\n  }\r\n\r\n  return (   \r\n      <div className='App__profile-info'>\r\n        <div className='App__profile-first-block'>\r\n          <div className='App__profile-photo-block'>\r\n            <img className='App__profile-photo' src={props.dataProfile.profile?.photos?.large || noPhoto} alt=\"#\" />\r\n            <input id='input-changePhoto' className='input-changePhoto' type='file' onChange={onMainPhotoSelected}/>\r\n            { props.isOwner && <label htmlFor='input-changePhoto'><img className='App__profile-photo-change' src={uploadPhoto} alt=\"\" /></label> }\r\n          </div>\r\n        </div>\r\n        <AboutMe isOwner={props.isOwner} profile={props.dataProfile.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n      </div>\r\n  )}\r\n\r\nexport default Description","import React from 'react';\r\nimport './Post.css';\r\nimport postLike from './../../../../../../assets/icons/white/heartNotLike.png';\r\n\r\ntype PropsType = {\r\n  message: string\r\n  likes: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div> \r\n      <div className='App__profile-postItem'>{props.message}</div>\r\n      <div className='App__profile-likesItem'><img src={postLike} alt=\"\" />{props.likes}</div>\r\n    </div> \r\n  )}\r\n\r\nexport default Post;","import React from 'react';\r\nimport { Field, InjectedFormProps } from 'redux-form';\r\nimport { reduxForm } from 'redux-form';\r\nimport { MaxLengthCreator } from '../../../../../utilities/validators/validators';\r\nimport { FormControl } from '../../../../common/FormControls/FormControls';\r\nimport './MyPosts.css';\r\nimport Post from './Post/Post';\r\nimport addPost from './../../../../../assets/icons/white/addPost.png';\r\nimport { PostType } from '../../../../../types/types';\r\nimport { FormPostDataType } from '../ProfileContainer';\r\n\r\n\r\ntype MyPostsFormValues = {\r\n  isOwner: boolean\r\n  dataPosts: Array<PostType>\r\n  addNewPost: (formData: FormPostDataType) => void\r\n}\r\n\r\nconst MyPosts:React.FC<MyPostsFormValues> = (props) => {\r\n\r\n  const postsItems = props.dataPosts.map((post) => <Post key={post.id} message={post.postText} likes = {post.likes}/>)\r\n\r\n  return (\r\n    <div className='App__posts-info'>\r\n      <div className='App__posts-form'>\r\n        <h3 className='App__posts-title'><b>My posts</b></h3>    \r\n        { props.isOwner && <NewPostReduxForm onSubmit={props.addNewPost}/>} \r\n      </div>\r\n      <div className='App__post-items'>\r\n        {postsItems}\r\n      </div>\r\n    </div> \r\n  )\r\n}\r\n\r\nconst maxLength10 = MaxLengthCreator(10)\r\n\r\ntype NewPostFormOwnPropsType = {}\r\n\r\nconst NewPostForm: React.FC<InjectedFormProps<FormPostDataType, NewPostFormOwnPropsType> & NewPostFormOwnPropsType> = (props) => {\r\n    return (\r\n      <form className='App__posts-addPost-form' onSubmit={props.handleSubmit}>\r\n        <Field className='App__posts-addPost-textarea' validate={maxLength10} placeholder={'Write post message here...'} component={FormControl} formType={'textarea'} type={\"text\"} name={'postText'}/>\r\n        <button className='App__posts-addPost-button'><img src={addPost} alt=\"\"/></button>\r\n      </form>\r\n    )\r\n}\r\n\r\nconst NewPostReduxForm = reduxForm<FormPostDataType, NewPostFormOwnPropsType>({\r\n  form: 'addPost'\r\n})(NewPostForm)\r\n\r\nexport default MyPosts;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { PostType } from '../../../../../types/types';\r\nimport { FormPostDataType } from '../ProfileContainer';\r\nimport MyPosts from './MyPosts';\r\n\r\ntype MyPostsContainerPropsType = {\r\n  isOwner: boolean\r\n  dataProfile: any\r\n  addNewPost: (formData: FormPostDataType) => void\r\n  dataPosts: Array<PostType>\r\n}\r\n\r\nconst MyPostsContainer: React.FC<MyPostsContainerPropsType> = (props) => {\r\n    return (\r\n      <>\r\n        <MyPosts  isOwner={props.isOwner}\r\n                  dataPosts={props.dataPosts} \r\n                  addNewPost={props.addNewPost}/>\r\n      </>\r\n    )\r\n  }\r\n\r\n\r\n\r\nexport default MyPostsContainer\r\n\r\n ","import React from 'react';\r\nimport './Profile.css';\r\nimport Description from './Description/Description';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport Preloader from '../../../common/Preloader/Preloader';\r\nimport { PostType, ProfileType } from '../../../../types/types';\r\nimport { FormPostDataType } from './ProfileContainer';\r\nimport { DataProfileType } from '../../../../redux/profileReducer';\r\n\r\ntype ProfilePropsType = {\r\n  isAuth: boolean\r\n  isOwner: boolean\r\n  dataProfile: DataProfileType\r\n  dataPosts: Array<PostType>\r\n  savePhoto: (filePhoto: any) => void\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n  addNewPost: (dataFormMessage: FormPostDataType) => void\r\n}\r\n\r\nconst Profile: React.FC<ProfilePropsType> = (props) => {\r\n  if (!props.dataProfile.profile) {\r\n    return <Preloader/>\r\n  } \r\n  \r\n  return (\r\n    <>\r\n      <Description savePhoto={props.savePhoto} isOwner={props.isOwner} dataProfile={props.dataProfile} status={props.status} updateStatus={props.updateStatus}/>\r\n      <MyPostsContainer isOwner={props.isOwner} dataPosts={props.dataPosts} dataProfile={props.dataProfile} addNewPost={props.addNewPost}/>\r\n    </> \r\n  )}\r\n  \r\nexport default Profile;","import React, { useEffect } from 'react';\r\nimport './Profile.css';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { ConnectedWithAuthRedirect } from '../../../../hoc/connectedWithAuthRedirect';\r\nimport { useParams } from 'react-router-dom';\r\nimport { actions, DataProfileType, savePhotoThunkCreator, setUserProfileThunkCreator, setUserStatusThunkCreator, updateStatusThunkCreator } from '../../../../redux/profileReducer';\r\nimport { AppStateType } from '../../../../redux/redux-store';\r\nimport { PostType } from '../../../../types/types';\r\nimport Preloader from '../../../common/Preloader/Preloader';\r\n\r\nexport type FormPostDataType = {\r\n  postText: string\r\n  likes: number\r\n  id: number\r\n}\r\n\r\ntype MapStatePropsType = {\r\n  dataProfile: DataProfileType\r\n  dataPosts: Array<PostType>\r\n  status: string\r\n  authorizedUserId: number | null\r\n  isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n  setUserProfile: (profileId: number) => void\r\n  setUserStatus: (profileId: number) => void\r\n  updateStatus: (status: string) => void\r\n  savePhoto: (filePhoto: any) => void\r\n  addNewPost: (postText: string) => void\r\n}\r\n\r\ntype OwnPropsType = {}\r\n\r\nconst ProfileContainer: React.FC<MapStatePropsType & MapDispatchPropsType & OwnPropsType> = (props) => {\r\n\r\n  let { profileId } = useParams<{profileId: string}>()\r\n  let userId = Number(profileId)\r\n\r\n  const refreshPage = () => {\r\n      if (!userId) {\r\n        console.log('UserId should be number!')\r\n      } else {\r\n        props.setUserProfile(userId)\r\n        props.setUserStatus(userId)\r\n      }\r\n  }\r\n\r\n  const addNewPost = (formData: FormPostDataType) => {\r\n    props.addNewPost(formData.postText)\r\n  }\r\n  \r\n  useEffect( () => {\r\n    refreshPage()\r\n  }, [profileId])\r\n\r\n  if (!props.dataProfile.profile) {\r\n    return <Preloader/>\r\n  } else {\r\n    return (\r\n      <div className='App__profile'>\r\n        <Profile  dataProfile = {props.dataProfile}\r\n                  isOwner={Number(profileId) === props.authorizedUserId}\r\n                  savePhoto={props.savePhoto}\r\n                  isAuth={props.isAuth}\r\n                  status={props.status}\r\n                  updateStatus={props.updateStatus}\r\n                  dataPosts={props.dataPosts}\r\n                  addNewPost={addNewPost}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n  dataPosts: state.dataProfile.dataPosts,\r\n  dataProfile: state.dataProfile,\r\n  status: state.dataProfile.status,\r\n  authorizedUserId: state.auth.id,\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nlet mapDispatchToProps = (dispatch: any): MapDispatchPropsType => ({\r\n  setUserProfile: (profileId: number) => {\r\n    dispatch(setUserProfileThunkCreator(profileId))\r\n  },\r\n  setUserStatus: (profileId: number) => {\r\n    dispatch(setUserStatusThunkCreator(profileId))\r\n  },\r\n  updateStatus: (status: string) => {\r\n    dispatch(updateStatusThunkCreator(status))\r\n  },\r\n  savePhoto: (filePhoto: any) => {\r\n    dispatch(savePhotoThunkCreator(filePhoto))\r\n  },\r\n  addNewPost: (postText: string) => {\r\n    dispatch(actions.newPostActionCreator(postText))\r\n  }\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, mapDispatchToProps),\r\n  ConnectedWithAuthRedirect)\r\n  (ProfileContainer)"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","activateEditMode","className","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","isOwner","onDoubleClick","onClick","src","statusChange","alt","contactTitle","contactValue","profile","fullName","to","Object","keys","contacts","map","key","lookingForAJob","lookingForAJobDescription","aboutMe","dataProfile","photos","large","noPhoto","id","type","target","files","length","savePhoto","htmlFor","uploadPhoto","message","postLike","likes","maxLength10","MaxLengthCreator","NewPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","validate","placeholder","component","FormControl","formType","name","addPost","postsItems","dataPosts","post","postText","addNewPost","Preloader","compose","connect","state","authorizedUserId","auth","isAuth","dispatch","setUserProfile","profileId","setUserProfileThunkCreator","setUserStatus","setUserStatusThunkCreator","updateStatusThunkCreator","filePhoto","savePhotoThunkCreator","actions","ConnectedWithAuthRedirect","useParams","userId","Number","console","log","formData"],"sourceRoot":""}